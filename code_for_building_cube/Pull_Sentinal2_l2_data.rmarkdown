---
title: "Pull_sentinal2_l2_data"
format:
  html:
    theme: default
    toc: true
    number-sections: true
---



# Run these Java options before anything else. 

```{r java_configuration}
options(java.parameters = "-Xmx64G")
options(timeout = max(600, getOption("timeout")))

```




#R libraries and global setting.

```{r load_libraries, cache=TRUE, message=FALSE, warning=FALSE}

#library(Rcpp)
library(sf)
library(gdalcubes)
library(rstac)
library(gdalUtils)
library(terra)
library(rgdal)
library(reshape2)
library(osmdata)
library(terra)
library(dplyr)
#library(glue)
library(stars)
library(ggplot2)
library(colorspace)
library(geos)
#library(glue)
library(osmdata)
library(ggthemes)
library(tidyr)
gdalcubes_options(parallel = 8)

sf::sf_extSoftVersion()
gdalcubes_gdal_has_geos()
```

```{r timer_start}
start <- Sys.time()
```

```{r color_settings, cache=TRUE, warning=FALSE, message=FALSE}
library(ggtern)
our_yellow <- rgb2hex(r = 253, g = 201, b = 51)
our_green <- rgb2hex(r = 10, g = 84, b = 62)
our_grey <- rgb2hex(r = 92, g = 96, b = 95)
our_white <- rgb2hex(r = 255, g = 255, b = 255)

```

```{r load_aoi_polygon, cache=TRUE, warning=FALSE, message=FALSE}
aoi_total <- st_read("/Users/ty/Documents/Github/Southern_California_Edison_Fire_Risk/SCE_Fire_Zone_V2/SCE_Fire_Zone_V2.shp") |> 
  st_as_sf() 
plot(aoi_total)

aoi <- aoi_total |>
  filter(OBJECTID == 5)
shape_bbox <- st_bbox(aoi)
plot(aoi)

aoi |> st_transform("EPSG:4326") |>
  st_bbox() -> bbox_4326

aoi |> st_transform("EPSG:32618") |>
  st_bbox() -> bbox_32618

```


#not finding band 10 for some reason...?

```{r search_STAC_collection, cache=TRUE, warning=FALSE, message=FALSE}
s = stac("https://earth-search.aws.element84.com/v0")
  items = s |>
    stac_search(collections = "sentinel-s2-l2a-cogs",
                bbox = c(bbox_4326["xmin"],bbox_4326["ymin"],
                         bbox_4326["xmax"],bbox_4326["ymax"]), 
                datetime = "2021-05-15/2021-05-16") |>
    post_request() |> items_fetch(progress = FALSE)
  length(items$features)


  library(gdalcubes)
assets = c("B01","B02","B03","B04","B05","B06", "B07","B08","B8A","B09","B11","B12","SCL")
s2_collection = stac_image_collection(items$features, asset_names = assets)
#property_filter = function(x) {x[["eo:cloud_cover"]] < 10}
s2_collection
```


Expand this to season and years. 

```{r set_view_window, cache=TRUE, warning=FALSE, message=FALSE}
v = cube_view(srs="EPSG:32618", dx=100, dy=100, dt="P1M", 
                           aggregation="median", resampling = "near",
                           extent=list(t0 = "2021-05-15", t1 = "2021-05-16",
                                       left=bbox_32618["xmin"], right=bbox_32618["xmax"],
                                       top=bbox_32618["ymax"], bottom=bbox_32618["ymin"]))
v


```

```{r pull_data, cache=TRUE, warning=FALSE, message=FALSE}
a <- Sys.time()

raster_cube(s2_collection, v) |> # no mask
  select_bands(c("B01","B02","B03","B04",
                 "B05","B06","B07","B08",
                 "B8A","B09","B11","B12"
                 )) |>
  extract_geom(aoi) |>
   rename("time" = "time",
          "443" = "B01",
          "490" = "B02",
          "560" = "B03",
          "665" = "B04",
          "705" = "B05",
          "740" = "B06",
          "783" = "B07",
          "842" = "B08",
          "865" = "B8A",
          "940" = "B09",
          "1610" = "B11",
          "2190" = "B12") -> x

x |>
  slice_sample(n=50000) |> # This is where we add the vegetation classification. 
  select(-FID)|>
   pivot_longer(!time, names_to = "wavelength_nm", values_to = "reflectance")|>
  mutate(wavelength_nm = as.numeric(wavelength_nm)) -> y

b <- Sys.time()
difftime(b,a)
y

```

```{r base_plot, cache=TRUE, warning=FALSE, message=FALSE}
#zz <- sample_n(z, 50000)
day_density <- ggplot(data=y, aes(x=wavelength_nm, y=reflectance, group=time))+ 
  stat_smooth( color=our_green, fill="lightgrey")+
  geom_density2d(colour="black", bins=10, alpha=0.1)+
  stat_density2d(aes(alpha=..level.., fill=..level..), linewidth=2, 
        bins=10, geom="polygon") + 
    scale_fill_gradient(low = our_white, high = our_yellow) +
  
    scale_alpha(range = c(0.00, 0.8), guide = FALSE) +
  
  theme_tufte() +
  xlab("wavelength") +
  ylab("reflectance")+
  ylim(0,16000)+
  theme(aspect.ratio=5/14, axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1,colour =c("darkblue","blue","green", "red", "darkred", "darkred","darkred", "darkred", "darkred", "black","black","black","black"))) +
  scale_x_continuous(breaks=c(443,490,560,665,705,740,783,842,865,940,1610,2190)) + theme(axis.title.x=element_blank(),
  plot.margin = margin(t = 30,  # Top margin
                             r = 10,  # Right margin
                             b = 40,  # Bottom margin
                             l = 18),       
axis.title.y=element_blank())
day_density
```

```{r aoi_inlay, cache=TRUE, warning=FALSE, message=FALSE}
guide_map <- ggplot(data= aoi_total) +
  geom_sf(fill=our_yellow, color=our_white) +
  geom_sf(data= aoi, fill=our_green, color=our_white) +
  theme_tufte()+
  ggtitle("Zone 5")+
  theme(axis.text.x=element_blank(), #remove x axis labels
        axis.ticks.x=element_blank(), #remove x axis ticks
        axis.text.y=element_blank(),  #remove y axis labels
        axis.ticks.y=element_blank()  #remove y axis ticks, bg=none
        )+ theme(plot.title = element_text(hjust=0.8, vjust = -2))
guide_map
```

```{r display_date, cache=TRUE, warning=FALSE, message=FALSE}
library(geosphere)
aoi_total |> st_centroid()  |> st_transform(crs="+proj=longlat") |> st_coordinates() |> colMeans() -> lat_long

daylength_line <- daylength(lat = lat_long[2], 1:365)

daylengths <- data.frame(time= 1:365, daylength = daylength_line)

library(lubridate)

# Create a template date object
date <- as.POSIXlt("2021-05-15")

doy <- format(date, format = "%j") |> as.numeric()

display_date <- format(date, format="%e %B %Y   ")
```

```{r date_inlay, cache=TRUE, warning=FALSE, message=FALSE}

date_inlay <- ggplot(data=daylengths) + 
 
  ggtitle("Daylength")+
  geom_ribbon(aes(x=time, ymin=daylength, ymax=15), fill=our_grey, alpha=0.5) +
  geom_ribbon(aes(x=time, ymax=daylength, ymin=9), fill=our_yellow, alpha=1) +
  geom_hline(yintercept=12, color=our_white) +
 geom_vline(xintercept=doy, color=our_green, size=1) +
  theme_tufte() +
  ylim(9,15) +
  theme(axis.text.y=element_blank(),
        axis.ticks.y=element_blank(),
        axis.title.y=element_blank(),
        axis.title.x=element_blank(),
        axis.text.x=element_blank(),
        axis.ticks.x=element_blank()) + theme(plot.title = element_text(hjust=0.5, vjust = 0))
date_inlay
```

```{r map_assembly, cache=TRUE, warning=FALSE, message=FALSE}
library(cowplot)
library(magick)
map_overlay <- ggdraw(day_density) + 
  draw_plot(guide_map, x = 1.08, y = 1, hjust = 1, vjust = 1, width = 0.3, height = 0.3)+
  draw_plot(date_inlay, x = 1, y = 0.35, hjust = 1, vjust = 1, width = 0.1, height = 0.25)+
  geom_text(aes(x=1, y=0.08, label=display_date, hjust = 1), color=our_grey, cex=3, fontface='bold') +
 # draw_image("Ty_powerline_plots/Southern_California_Edison_Logo.png", x = -0.24, y = 0.38, scale=.3)+
 # draw_image("Ty_powerline_plots/earthlab_logo.png", x = -0.38, y = 0.38, scale=.25)+
  geom_text(aes(x=0.4, y=.9, label="Spectral library - Monthly average"), color=our_green, hjust = 0, cex=8, fontface='bold') +
  geom_text(aes(x=0.01, y=.04, 
    label="Created by Earth Lab (L. Jones, V. Iglasias, T. Tuff, C. Amaral, E.Verleye ) for Southern California Edison -- September 2023. Sentinel 2 Data from 'https://earth-search.aws.element84.com/v0'"), color=our_grey, hjust  = 0, cex=3) +
geom_text(aes(x=0.4, y=.1, label="wavelength (nm)"), color=our_grey, hjust = 0, cex=4, fontface='bold') +
geom_text(aes(x=0.01, y=.5,angle = 90, label="reflectance"), color=our_grey, hjust = 0, cex=4, fontface='bold')
map_overlay
```

```{r save_map, cache=TRUE, warning=FALSE, message=FALSE}
ggsave(map_overlay, file="day_density_15_May_2021_zone_5.png", bg="white", dpi = 600, width = 12,
  height = 5)
```

```{r end_timer, cache=TRUE, warning=FALSE, message=FALSE}
end <- Sys.time()
difftime(end,start)
```




#boosted regression
Not implemented yet

```{r boosted_regression, eval=FALSE}
library(reshape)
library("viridis")  
library(RColorBrewer)



quantiles_of_reflectance <- function(one_species_data){
  
 
for_predict <- one_species_data %>% select(wavelength_nm)
to_fill <- data.frame(matrix(NA, ncol=100, nrow=nrow(one_species_data)))
colnames(to_fill)<- paste0(rep("qt",100), seq(1,100))

counter <- 1
for(i in seq(0.01,0.99,by=0.01)){
boost_me <- gbm(reflectance ~ wavelength_nm, data=one_species_data, 
                  n.trees=2000, interaction.depth=49, shrinkage=0.01,
                  bag.fraction=0.5,distribution=list(name = "quantile", alpha = i))
to_fill[,counter] <- predict(boost_me, newdata=for_predict)
counter <- counter + 1
print(counter)
}
#to_fill <- to_fill[,1:10]


melted_plot_data <- melt(to_fill, id.qt = "quantile")
wv_repeat <- data.frame(matrix(for_predict[,1], nrow=nrow(for_predict)*10, ncol=1))
  bound_quantiles <- cbind(wv_repeat, melted_plot_data)
colnames(bound_quantiles) <- c("wavelength_nm","quantile","reflectance")
prob_density <- bound_quantiles %>% 
  mutate(probability_density = substring(quantile, 3))%>% 
  mutate(probability_density_original = substring(quantile, 3))

prob_density$probability_density <- as.numeric(prob_density$probability_density)/100
prob_density$probability_density[which(prob_density$probability_density > 0.5)] <- 1 - prob_density$probability_density[which(prob_density$probability_density > 0.5)] 
    
prob_density$probability_density_original <- as.numeric(prob_density$probability_density_original)/100


return(prob_density)
}



```

